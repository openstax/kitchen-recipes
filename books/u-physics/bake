#!/usr/bin/env ruby

# frozen_string_literal: true

require 'bundler/inline'

gemfile do
  gem 'openstax_kitchen', ENV['USE_LOCAL_KITCHEN'] ? { path: '/code/kitchen' } : '2.0.0'
  gem 'slop', '4.8.2'
  gem 'byebug'
end

before = Kitchen::BookRecipe.new(book_short_name: :u_physics) do |doc|
  include Kitchen::Directions

  book = doc.book

  # remove exercises (take out once BakeExercise works)
  book.search('[data-type="exercise"]').trash
end

recipe = Kitchen::BookRecipe.new(book_short_name: :uphysics) do |doc|
  include Kitchen::Directions

  book = doc.book

  book.search('cnx-pi').trash

  # Add wrappers and such

  BakePreface.v1(book: book)
  BakeChapterIntroductions.v1(book: book)
  BakeChapterTitle.v1(book: book)
  book.chapters.each do |chapter|
    BakePageAbstracts.v1(chapter: chapter)
  end

  solutions_container = BakeBookAnswerKey.v1(book: book)
  BakeIndex.v1(book: book)

  # Bake the notes
  BakeAutotitledNotes.v1(book: book, classes: %w[media-2 problem-solving])
  BakeUnclassifiedNotes.v1(book: book)
  BakeNumberedNotes.v1(book: book, classes: %w[check-understanding])

  # Bake EOC sections
  book.chapters.each do |chapter|
    eoc_wrapper = BakeChapterReview.v1(chapter: chapter, metadata_source: book.metadata)

    BakeChapterGlossary.v1(chapter: chapter, metadata_source: book.metadata, append_to: eoc_wrapper)
    BakeChapterKeyEquations.v1(chapter: chapter, metadata_source: book.metadata, append_to: eoc_wrapper)
    BakeChapterKeyConcepts.v1(chapter: chapter, metadata_source: book.metadata, append_to: eoc_wrapper)
    # EoC sections with exercises
    BakeChapterReviewExercises.v2(chapter: chapter, metadata_source: book.metadata, append_to: eoc_wrapper, klass: 'review-conceptual-questions')
    BakeChapterReviewExercises.v2(chapter: chapter, metadata_source: book.metadata, append_to: eoc_wrapper, klass: 'review-problems')
    BakeChapterReviewExercises.v1(chapter: chapter, metadata_source: book.metadata, append_to: eoc_wrapper, klass: 'review-additional-problems')
    BakeChapterReviewExercises.v1(chapter: chapter, metadata_source: book.metadata, append_to: eoc_wrapper, klass: 'review-challenge')
    # In-place bake exercises & solutions
    chapter.search('.review-conceptual-questions, .review-problems, .review-additional-problems, .review-challenge').exercises.each do |exercise|
      BakeNumberedExercise.v1(exercise: exercise, number: exercise.count_in(:chapter))
    end
  end


  book.chapters.each do |chapter|
    BakeChapterAnswerKey.v1(chapter: chapter, metadata_source: book.metadata, strategy: :uphysics, append_to: solutions_container)
  end

  book.chapters.each do |chapter|
    #BakePageAbstracts.v1(chapter: chapter)

    chapter.tables('$:not(.unnumbered)').each do |table|
      BakeNumberedTable.v1(table: table,
                           number: "#{chapter.count_in(:book)}.#{table.count_in(:chapter)}")
    end

    chapter.examples.each do |example|
      BakeExample.v1(example: example,
                     number: "#{chapter.count_in(:book)}.#{example.count_in(:chapter)}",
                     title_tag: 'h3')
    end

    BakeNonIntroductionPages.v1(chapter: chapter)

    chapter.figures.each do |figure|
      BakeFigure.v1(figure: figure,
                    number: "#{chapter.count_in(:book)}.#{figure.count_in(:chapter)}")
    end
  end

  book.pages('$.appendix').each do |page|
    appendix_letter = [*('A'..'Z')][page.count_in(:book) - 1]
    BakeAppendix.v1(page: page, number: appendix_letter)

    page.tables('$:not(.unnumbered)').each do |table|
      BakeNumberedTable.v1(table: table, number: "#{appendix_letter}#{table.count_in(:page)}")
    end
  end

  BakeUnnumberedTables.v1(book: book)
  BakeEquations.v1(book: book)
  BakeMathInParagraph.v1(book: book)

  # Fix titles in chapter review composite pages
  book.chapters('.os-eoc.os-chapter-review-container').composite_pages.each do |page|
    title = page.search('[data-type="document-title"]').first
    title[:'data-type'] = 'title'
    title.name = 'h3'
    page.metadatas.first.search('[data-type="document-title"]').first.replace_children(with: 'Chapter Review')
  end

  # index = book.search('.os-eob.os-index-container').first.cut
  # book.body.append(child: index.raw)

  BakeCompositePages.v1(book: book)
  BakeCompositeChapters.v1(book: book)
  BakeUnitTitle.v1(book: book)
  BakeToc.v1(book: book)
  BakeLinkPlaceholders.v1(book: book)

end

after = Kitchen::BookRecipe.new(book_short_name: :u_physics) do |doc|
  include Kitchen::Directions

  book = doc.book

  # remove w3 from toc
  book.search('nav#toc').first.search('[xmlns="http://www.w3.org/1999/xhtml"]').each do |el|
    el.remove_attribute('xmlns')
  end

  # do weird things to captions
  book.search('.os-caption-container').each do |caption|
    clip = Kitchen::Clipboard.new
    title = caption.search('.os-caption').search('[data-type="title"]').first
    title&.add_class('os-title')
    title&.cut(to: clip)
    sibling = caption.search('.os-divider').first
    sibling.append(sibling: clip.paste)
  end

  # mask key terms numbering
  book.search('[data-type="term"]').each do |term|
    id = term[:id]&.split('_term')
    #byebug
    next unless id

    number = id[1].to_i
    if number >= 165
      #byebug
      number += 1
      term[:id] = "#{id[0]}_term#{number}"
    end
  end
end

opts = Slop.parse do |slop|
  slop.string '--input', 'Assembled XHTML input file', required: true
  slop.string '--output', 'Baked XHTML output file', required: true
end

puts Kitchen::Oven.bake(
  input_file: opts[:input],
  recipes: [recipe, after],
  output_file: opts[:output]
)
