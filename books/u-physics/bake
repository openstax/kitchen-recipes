#!/usr/bin/env ruby

# frozen_string_literal: true

require 'bundler/inline'

gemfile do
  gem 'openstax_kitchen', ENV['USE_LOCAL_KITCHEN'] ? { path: '/code/kitchen' } : '2.0.0'
  gem 'slop', '4.8.2'
  gem 'byebug'
end

before = Kitchen::BookRecipe.new(book_short_name: :u_physics) do |doc|
  include Kitchen::Directions

  book = doc.book

  # remove exercises (take out once BakeExercise works)
  book.search('[data-type="exercise"]').trash
end

recipe = Kitchen::BookRecipe.new(book_short_name: :uphysics) do |doc|
  include Kitchen::Directions

  book = doc.book

  book.search('cnx-pi').trash

  BakePreface.v1(book: book)
  BakeUnitTitle.v1(book: book)

  book.chapters.each do |chapter|
    BakeChapterGlossary.v1(chapter: chapter, metadata_source: book.metadata)
    BakeChapterKeyEquations.v1(chapter: chapter, metadata_source: book.metadata)
    BakeChapterKeyConcepts.v1(chapter: chapter, metadata_source: book.metadata)
  end

  BakeChapterIntroductions.v1(book: book)
  BakeChapterTitle.v1(book: book)

  book.chapters.each do |chapter|
    BakePageAbstracts.v1(chapter: chapter)

    chapter.tables('$:not(.unnumbered)').each do |table|
      BakeNumberedTable.v1(table: table,
                           number: "#{chapter.count_in(:book)}.#{table.count_in(:chapter)}")
    end

    chapter.examples.each do |example|
      BakeExample.v1(example: example,
                     number: "#{chapter.count_in(:book)}.#{example.count_in(:chapter)}",
                     title_tag: 'h3')
    end

    chapter.pages('$:not(.introduction)').each do |page|
      page.search("div[data-type='description']").each(&:trash)
      page.add_class('chapter-content-module')

      title = page.search("div[data-type='document-title']").first
      title.name = 'h2'
      title.replace_children(with:
        <<~HTML
          <span class="os-number">#{chapter.count_in(:book)}.#{page.count_in(:chapter)}</span>
          <span class="os-divider"> </span>
          <span data-type="" itemprop="" class="os-text">#{title.text}</span>
        HTML
      )
    end

    chapter.figures.each do |figure|
      BakeFigure.v1(figure: figure,
                    number: "#{chapter.count_in(:book)}.#{figure.count_in(:chapter)}")
    end
  end

  book.pages('$.appendix').each do |page|
    appendix_letter = [*('A'..'Z')][page.count_in(:book) - 1]
    BakeAppendix.v1(page: page, number: appendix_letter)
  end

  BakeUnnumberedTables.v1(book: book)

  # Bake the notes
  book.chapters.pages.notes.each do |note|
    if note.classes.empty?
      BakeUnclassifiedNote.v1(note: note)
    elsif (note.classes & %w[media-2 problem-solving]).any?
      BakeTitledNote.v1(note: note)
    end
  end
  # Numbered notes must be searched for separately to ensure an accurate count
  book.chapters.pages.notes('.check-understanding').each do |note|
    BakeNumberedNote.v1(note: note)
  end

  # bake equations
  # book.chapters.search('[data-type="equation"]', except: ->(eq) { eq.classes.include?('unnumbered') }).each do |eq|
  #   #next if eq.classes.include?('unnumbered')

  #   eq.append(child:
  #     <<~HTML
  #       <div class="os-equation-number">
  #         <span class="os-number">#{eq.ancestor(:chapter).count_in(:book)}.1</span>
  #       </div>
  #     HTML
  #   )
  # end

  BakeMathInParagraph.v1(book: book)
  BakeIndex.v1(book: book)
  BakeCompositePages.v1(book: book)

  BakeToc.v1(book: book)
  BakeLinkPlaceholders.v1(book: book)
end

after = Kitchen::BookRecipe.new(book_short_name: :u_physics) do |doc|
  include Kitchen::Directions

  book = doc.book

  # remove copy_XXX from places that don't have it
  book.search('[data-type="solution"]').each do |solution|
    solution[:id] = solution[:id].gsub(/_copy_(\d+)$/, '')
  end
  book.search('.os-solution-container').search('p').each do |p|
    p[:id] = p[:id].gsub(/_copy_(\d+)$/, '') if p[:id]
  end

  # add copy_XXX to places that need it
  book.search('.os-key-concepts').search('h3').each do |h3|
    h3[:id] = "#{h3[:id]}_copy_XXX"
  end

  # remove w3 from toc
  book.search('nav#toc').first.search('[xmlns="http://www.w3.org/1999/xhtml"]').each do |el|
    el.remove_attribute('xmlns')
  end

  # do weird things to captions
  book.search('.os-caption-container').each do |caption|
    clip = Kitchen::Clipboard.new
    title = caption.search('.os-caption').search('[data-type="title"]').first
    title&.add_class('os-title')
    title&.cut(to: clip)
    sibling = caption.search('.os-divider').first
    sibling.append(sibling: clip.paste)
  end
end

opts = Slop.parse do |slop|
  slop.string '--input', 'Assembled XHTML input file', required: true
  slop.string '--output', 'Baked XHTML output file', required: true
end

puts Kitchen::Oven.bake(
  input_file: opts[:input],
  recipes: [before, recipe, after],
  output_file: opts[:output]
)
